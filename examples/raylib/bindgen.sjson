// Inputs can be folders or files. It will look for header (.h) files inside
// any folder. The bindings will be based on those headers. Also, any .lib,
// .odin, .dll etc will be copied to the output folder.
inputs = [
	"input"
]

// Output folder: One .odin file per processed header
output_folder = "raylib"

// Remove this prefix from type names and procedure names
remove_prefix = ""

// Only include things that has this prefix
required_prefix = ""

// Single lib file to import
import_lib = "" // For example: "some_lib.lib"

// Code file that contain libray import code and whatever else extra you need.
// Overrides lib_file. Is pasted near top of the final bindings.
imports_file = "imports.odin"

// For package line at top of output files
package_name = "raylib"

// "Old_Name" = "New_Name",
rename_types = {
	"ConfigFlags" = "ConfigFlag"
}

// Turns an enum into a bit_set. Converts the values of the enum into
// appropriate values for a bit_set. Creates a bit_set type that uses the enum.
// Properly removes enum values with value 0. Translates the enum values using
// a log2 procedure.
bit_setify = {
	// "Pre_Existing_Enum_Type" = "New_Bit_Set_Type"
	"Gesture" = "Gestures"
	"ConfigFlag" = "ConfigFlags"
}

// Completely override the definition of a type.
type_overrides = {
	"Vector2" = "[2]f32"
	"Vector3" = "[3]f32"
	"Vector4" = "[4]f32"
	"Matrix"  = "#row_major matrix[4, 4]f32"
	"Color"   = "distinct [4]u8"
}

// Override the type of a struct field. Note that a plain `[^]` can be used to
// modify the existing type.
struct_field_overrides = {
	"Image.format"      = "PixelFormat"
	"Texture.format"    = "PixelFormat"
	"NPatchInfo.layout" = "NPatchLayout"
	"GlyphInfo.value"   = "rune"

	"Mesh.vertices"     = "[^]"
	"Mesh.texcoords"    = "[^]"
	"Mesh.texcoords2"   = "[^]"
	"Mesh.normals"      = "[^]"
	"Mesh.tangents"     = "[^]"
	"Mesh.colors"       = "[^]"
	"Mesh.indices"      = "[^]"
	"Mesh.animVertices" = "[^]"
	"Mesh.animNormals"  = "[^]"
	"Mesh.boneIds"      = "[^]"
	"Mesh.boneWeights"  = "[^]"
	"Mesh.boneMatrices" = "[^]"
	"Mesh.vboId"        = "[^]"
	"Shader.locs"       = "[^]"
	"Material.maps"     = "[^]"
	"Model.meshes"        = "[^]"
	"Model.materials"     = "[^]"
	"Model.meshMaterials" = "[^]"
	"Model.bones"         = "[^]"
	"Model.bindPose"      = "[^]"
	"ModelAnimation.bones"      = "[^]"
	"ModelAnimation.framePoses" = "[^][^]Transform"

	// This is not a complete override list, it's just an example.
}

// Overrides the type of a procedure parameter or return value. For a parameter
// use the key Proc_Name.parameter_name. For a return value use the key Proc_Name.
// Note that a plain `[^]` and `#by_ptr` can be used to modify the existing type.
procedure_type_overrides = {
	"SetConfigFlags.flags"         = "ConfigFlags"
	"IsKeyPressed.key"             = "KeyboardKey"
	"IsKeyPressedRepeat.key"       = "KeyboardKey"
	"IsKeyDown.key"                = "KeyboardKey"
	"IsKeyReleased.key"            = "KeyboardKey"
	"IsKeyUp.key"                  = "KeyboardKey"
	"GetKeyPressed"                = "KeyboardKey"
	"IsMouseButtonPressed.button"  = "MouseButton"
	"IsMouseButtonDown.button"     = "MouseButton"
	"IsMouseButtonReleased.button" = "MouseButton"
	"IsMouseButtonUp.button"       = "MouseButton"
	"SetShaderValue.uniformType"   = "ShaderUniformDataType"
	"SetShaderValueV.uniformType"  = "ShaderUniformDataType"
	"SetExitKey.key"               = "KeyboardKey"
	"GetKeyName.key"               = "KeyboardKey"
	"IsGestureDetected.gesture"    = "Gestures"
	"SetGesturesEnabled.flags"     = "Gestures"
}

// Inject a new type before another type. Use `rename_types` to just rename
// a pre-existing type.
inject_before = {
	// "Some_Type" = "New_Type :: distinct int"
}

// For typedefs that don't resolve to anything: Put them in here to create
// empty structs with that name.
opaque_types = [
	// "Some_Type"
]

// additional include path to send into clang. While generating the bindings
// clang will look into this path in search for included headers.
clang_include_path = ""

// Writes the clang JSON ast dump for debug inspection
debug_dump_json_ast = true